{"version":3,"sources":["Redux/contactActions.js","Redux/contactOperations.js","Components/Theme/index.js","Redux/selectors.js","Components/Contact/index.js","Redux/filterActions.js","Components/Filter/index.js","Components/InputForm/index.js","Components/Wrapper/index.js","Redux/themeActions.js","Components/ThemeButton/index.js","app.js","Redux/contactReducer.js","Redux/loadingReducer.js","Redux/filterReducer.js","Redux/themeReducer.js","Redux/store.js","index.js"],"names":["contactDelete","createAction","contactDeleteRequest","contactDeleteSuccess","contactDeleteError","contactAddRequest","contactAddSuccess","contactAddError","contactGetRequest","contactGetSuccess","contactGetError","contactAdd","name","number","dispatch","getState","contactActions","contacts","check","length","forEach","el","alert","checkContact","axios","post","then","response","data","catch","error","contactGet","get","contactId","delete","lightTheme","fontColor","bodybg","darkTheme","state","filter","theme","mapDispatchToProps","onDelete","contactOperations","connect","selectors","filterForm","key","id","className","value","onClick","e","target","style","color","Theme","background","map","toLowerCase","includes","filterContact","filterAdd","filterActions","type","onChange","InputForm","addContact","preventDefault","props","onAdd","setState","handleName","handleNumber","this","onGet","onSubmit","loading","width","textAlign","Component","Wrapper","children","themeChange","changeTheme","themeActions","App","contactReducer","createReducer","action","payload","Number","loadingReducer","filterReducer","themeReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2134f82.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst contactDelete = createAction('contact/delete');\r\n\r\nconst contactDeleteRequest = createAction('contact/deleteRequest');\r\nconst contactDeleteSuccess = createAction('contact/deleteSuccess');\r\nconst contactDeleteError = createAction('contact/deleteError');\r\n\r\nconst contactAddRequest = createAction('contact/addRequest');\r\nconst contactAddSuccess = createAction('contact/addSuccess');\r\nconst contactAddError = createAction('contact/addError');\r\n\r\nconst contactGetRequest = createAction('contact/getRequest');\r\nconst contactGetSuccess = createAction('contact/getSuccess');\r\nconst contactGetError = createAction('contact/getError');\r\n\r\nexport default {\r\n  contactDelete,\r\n  contactAddRequest,\r\n  contactAddSuccess,\r\n  contactAddError,\r\n  contactGetRequest,\r\n  contactGetSuccess,\r\n  contactGetError,\r\n  contactDeleteRequest,\r\n  contactDeleteSuccess,\r\n  contactDeleteError,\r\n};\r\n","import axios from 'axios';\r\nimport contactActions from './contactActions';\r\n\r\nconst checkContact = (contacts, name) => {\r\n  let check = true;\r\n  if (contacts.length > 0) {\r\n    contacts.forEach(el => {\r\n      if (el.name === name) {\r\n        alert('You already have this contact');\r\n        check = false;\r\n      } else check = true;\r\n    });\r\n  }\r\n  return check;\r\n};\r\n\r\nconst contactAdd = (name, number) => (dispatch, getState) => {\r\n  dispatch(contactActions.contactAddRequest());\r\n\r\n  if (checkContact(getState().contacts, name)) {\r\n    axios\r\n      .post('http://localhost:2000/contacts', { name, number })\r\n      .then(response =>\r\n        dispatch(contactActions.contactAddSuccess(response.data)),\r\n      )\r\n      .catch(error => dispatch(contactActions.contactAddError(error)));\r\n  } else\r\n    dispatch(contactActions.contactAddError('Already have this contact...'));\r\n};\r\n\r\nconst contactGet = () => dispatch => {\r\n  dispatch(contactActions.contactGetRequest());\r\n\r\n  axios\r\n    .get('http://localhost:2000/contacts')\r\n    .then(response => dispatch(contactActions.contactGetSuccess(response.data)))\r\n    .catch(error => dispatch(contactActions.contactGetError(error)));\r\n};\r\n\r\nconst contactDelete = contactId => dispatch => {\r\n  dispatch(contactActions.contactDeleteRequest());\r\n\r\n  axios\r\n    .delete(`http://localhost:2000/contacts/${contactId}`)\r\n    .then(() => dispatch(contactActions.contactDeleteSuccess(contactId)))\r\n    .catch(error => dispatch(contactActions.contactDeleteError(error)));\r\n};\r\n\r\nexport default { contactAdd, contactGet, contactDelete };\r\n","const lightTheme = {\r\n  fontColor: 'black',\r\n  bodybg: 'white',\r\n};\r\nconst darkTheme = {\r\n  fontColor: 'white',\r\n  bodybg: 'black',\r\n};\r\n\r\nexport default { lightTheme, darkTheme };\r\n","const getContacts = state => state.contacts;\r\nconst getFilter = state => state.filter;\r\nconst getTheme = state => state.theme;\r\n\r\nexport default { getContacts, getFilter, getTheme };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactOperations from '../../Redux/contactOperations';\r\nimport Theme from '../Theme';\r\nimport selectors from '../../Redux/selectors';\r\nimport './style.scss';\r\n\r\nconst Contact = ({ onDelete, contacts, filter, theme }) => {\r\n  const filterForm = el => {\r\n    return (\r\n      <li key={el.id} className=\"contactCard\">\r\n        <p>{el.name}: </p>\r\n        <p>{el.number}</p>\r\n        <button\r\n          className=\"contactCard__btn\"\r\n          value={el.id}\r\n          onClick={e => onDelete(e.target.value)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  const filterContact = (filter, el) => {\r\n    if (filter !== '') {\r\n      if (el.name.toLowerCase().includes(filter.toLowerCase())) {\r\n        return filterForm(el);\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return filterForm(el);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul\r\n      className=\"contactList\"\r\n      style={{ color: Theme[theme].fontColor, background: Theme[theme].bodybg }}\r\n    >\r\n      {contacts.length > 0 &&\r\n        contacts.map(el => {\r\n          return filterContact(filter, el);\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: selectors.getContacts(state),\r\n    filter: selectors.getFilter(state),\r\n    theme: selectors.getTheme(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onDelete: contactOperations.contactDelete,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contact);\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst filterAdd = createAction('filter/add');\r\n\r\nexport default { filterAdd };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport filterActions from '../../Redux/filterActions';\r\nimport Theme from '../Theme';\r\nimport selectors from '../../Redux/selectors';\r\nimport './styles.scss';\r\n\r\nconst Filter = ({ filter, filterAdd, theme }) => {\r\n  return (\r\n    <div\r\n      className=\"contactFormSearch\"\r\n      style={{ color: Theme[theme].fontColor, background: Theme[theme].bodybg }}\r\n    >\r\n      <h2>Contacts</h2>\r\n      <form>\r\n        <label>Find a contact: </label>\r\n        <input\r\n          type=\"text\"\r\n          value={filter}\r\n          onChange={e => filterAdd(e.target.value)}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: selectors.getFilter(state),\r\n    theme: selectors.getTheme(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  filterAdd: filterActions.filterAdd,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactOperations from '../../Redux/contactOperations';\r\nimport Theme from '../Theme';\r\nimport selectors from '../../Redux/selectors';\r\nimport './style.scss';\r\n\r\nclass InputForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.contacts.length === 0) {\r\n      this.props.onGet();\r\n    }\r\n  }\r\n\r\n  addContact = e => {\r\n    e.preventDefault();\r\n    this.props.onAdd(this.state.name, this.state.number);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  handleName = e => {\r\n    this.setState({ name: e.target.value });\r\n  };\r\n\r\n  handleNumber = e => {\r\n    this.setState({ number: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          color: Theme[this.props.theme].fontColor,\r\n          background: Theme[this.props.theme].bodybg,\r\n        }}\r\n      >\r\n        <h1>Phonebook</h1>\r\n        <form onSubmit={this.addContact} className=\"contactFormEl\">\r\n          <label>Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleName}\r\n          />\r\n          <label>Number:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.number}\r\n            onChange={this.handleNumber}\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Add contact\"\r\n            className=\"contactFormEl__button\"\r\n          />\r\n        </form>\r\n        {this.props.loading && (\r\n          <h3\r\n            style={{\r\n              width: 400,\r\n              textAlign: 'center',\r\n              color: Theme[this.props.theme].fontColor,\r\n              background: Theme[this.props.theme].bodybg,\r\n            }}\r\n          >\r\n            Loading....\r\n          </h3>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: selectors.getContacts(state),\r\n    filter: selectors.getFilter(state),\r\n    theme: selectors.getTheme(state),\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  onAdd: contactOperations.contactAdd,\r\n  onGet: contactOperations.contactGet,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","import React, { Component } from 'react';\r\nimport Theme from '../Theme';\r\nimport { connect } from 'react-redux';\r\nimport selectors from '../../Redux/selectors';\r\nimport './styles.scss';\r\n\r\nclass Wrapper extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: Theme[this.props.theme].fontColor,\r\n          background: Theme[this.props.theme].bodybg,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    theme: selectors.getTheme(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Wrapper);\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst themeChange = createAction('theme/change');\r\n\r\nexport default { themeChange };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport themeActions from '../../Redux/themeActions';\r\nimport selectors from '../../Redux/selectors';\r\nimport './styles.scss';\r\n\r\nconst ThemeButton = ({ changeTheme, theme }) => {\r\n  const change = () => {\r\n    if (theme === 'lightTheme') {\r\n      changeTheme('darkTheme');\r\n    } else {\r\n      changeTheme('lightTheme');\r\n    }\r\n  };\r\n  return (\r\n    <button className=\"themeButton\" onClick={change}>\r\n      Change theme!\r\n    </button>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    theme: selectors.getTheme(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeTheme: themeActions.themeChange,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ThemeButton);\r\n","import React from 'react';\r\nimport Contact from './Components/Contact';\r\nimport Filter from './Components/Filter';\r\nimport InputForm from './Components/InputForm';\r\nimport Wrapper from './Components/Wrapper';\r\nimport ThemeButton from './Components/ThemeButton';\r\nimport './sass/main.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Wrapper>\r\n      <ThemeButton />\r\n      <InputForm />\r\n      <Filter />\r\n      <Contact />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport contactActions from './contactActions';\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload];\r\n};\r\n\r\nconst getContact = (state, action) => {\r\n  return [...state, ...action.payload];\r\n};\r\n\r\nconst deleteContact = (state, action) => {\r\n  return state.filter(el => el.id !== Number(action.payload));\r\n};\r\n\r\nconst contactReducer = createReducer([], {\r\n  [contactActions.contactAddSuccess]: addContact,\r\n  [contactActions.contactGetSuccess]: getContact,\r\n  [contactActions.contactDeleteSuccess]: deleteContact,\r\n});\r\n\r\nexport default contactReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport contactActions from './contactActions';\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  [contactActions.contactAddRequest]: () => true,\r\n  [contactActions.contactAddSuccess]: () => false,\r\n  [contactActions.contactAddError]: () => false,\r\n  [contactActions.contactGetRequest]: () => true,\r\n  [contactActions.contactGetSuccess]: () => false,\r\n  [contactActions.contactGetError]: () => false,\r\n  [contactActions.contactDeleteRequest]: () => true,\r\n  [contactActions.contactDeleteSuccess]: () => false,\r\n  [contactActions.contactDeleteError]: () => false,\r\n});\r\n\r\nexport default loadingReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport filterActions from './filterActions';\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterActions.filterAdd.type]: (state, action) => action.payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport themeActions from './themeActions';\r\n\r\nconst themeReducer = createReducer('lightTheme', {\r\n  [themeActions.themeChange.type]: (state, action) => action.payload,\r\n});\r\n\r\nexport default themeReducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactReducer from './contactReducer';\r\nimport loadingReducer from './loadingReducer';\r\nimport filterReducer from './filterReducer';\r\nimport themeReducer from './themeReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n    filter: filterReducer,\r\n    theme: themeReducer,\r\n    loading: loadingReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './app';\nimport store from './Redux/store.js';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}